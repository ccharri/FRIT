#ifndef _DIRECTIONS_H_
#define _DIRECTIONS_H_

#include "map.h"
#include <type_traits>

#define VALUE(enum, ident) ((std::underlying_type< enum >::type) enum ::ident)

enum class QUARTILE_DIRECTION : char {
	NORTH= 'N',
	EAST = 'E',
	SOUTH = 'S',
	WEST = 'W',
	NONE = 0
};

enum class OCTILE_DIRECTION : char {
	NORTH = VALUE(QUARTILE_DIRECTION, NORTH),
	EAST = VALUE(QUARTILE_DIRECTION, EAST),
	SOUTH = VALUE(QUARTILE_DIRECTION, SOUTH),
	WEST = VALUE(QUARTILE_DIRECTION, WEST),
	NORTH_EAST = 'A',
	NORTH_WEST = 'B',
	SOUTH_EAST = 'C',
	SOUTH_WEST = 'D',
	NONE = VALUE(QUARTILE_DIRECTION, NONE)
};


const char VALID_QUARTILE_DIRECTIONS[4] = {
    VALUE(QUARTILE_DIRECTION, NORTH),
	VALUE(QUARTILE_DIRECTION, EAST),
	VALUE(QUARTILE_DIRECTION, SOUTH),
	VALUE(QUARTILE_DIRECTION, WEST)
};

const int NUM_VALID_QUARTILE_DIRECTIONS = sizeof(VALID_QUARTILE_DIRECTIONS) / sizeof(QUARTILE_DIRECTION);

const char VALID_OCTILE_DIRECTIONS[8] = {
	 VALUE(OCTILE_DIRECTION, NORTH),
	 VALUE(OCTILE_DIRECTION, NORTH_EAST),
	 VALUE(OCTILE_DIRECTION, EAST),
	 VALUE(OCTILE_DIRECTION, SOUTH_EAST),
	 VALUE(OCTILE_DIRECTION, SOUTH),
	 VALUE(OCTILE_DIRECTION, SOUTH_WEST),
	 VALUE(OCTILE_DIRECTION, WEST),
	 VALUE(OCTILE_DIRECTION, NORTH_WEST)
};

const int NUM_VALID_OCTILE_DIRECTIONS = sizeof(VALID_OCTILE_DIRECTIONS) / sizeof(OCTILE_DIRECTION);

inline char getOppositeDir(char dir) {
	switch (dir) {
	case VALUE(OCTILE_DIRECTION, NORTH):        return VALUE(OCTILE_DIRECTION, SOUTH);
	case VALUE(OCTILE_DIRECTION, SOUTH):        return VALUE(OCTILE_DIRECTION, NORTH);
	case VALUE(OCTILE_DIRECTION, EAST):         return VALUE(OCTILE_DIRECTION, WEST);
	case VALUE(OCTILE_DIRECTION, WEST):         return VALUE(OCTILE_DIRECTION, EAST);
	case VALUE(OCTILE_DIRECTION, NORTH_EAST):   return VALUE(OCTILE_DIRECTION, SOUTH_WEST);
	case VALUE(OCTILE_DIRECTION, NORTH_WEST):   return VALUE(OCTILE_DIRECTION, SOUTH_EAST);
	case VALUE(OCTILE_DIRECTION, SOUTH_EAST):   return VALUE(OCTILE_DIRECTION, NORTH_WEST);
	case VALUE(OCTILE_DIRECTION, SOUTH_WEST):   return VALUE(OCTILE_DIRECTION, NORTH_EAST);
	default:                                    return VALUE(OCTILE_DIRECTION, NONE);
	}
}

#endif