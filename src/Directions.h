#ifndef _DIRECTIONS_H_
#define _DIRECTIONS_H_

#include "map.h"

typedef char dir_t ;


typedef enum : dir_t {
	NORTH= 'N',
	EAST = 'E',
	SOUTH = 'S',
	WEST = 'W',
	NONE = 0
} QUARTILE_DIRECTION;

typedef enum : dir_t {
	NORTH = QUARTILE_DIRECTION::NORTH,
	EAST = QUARTILE_DIRECTION::EAST,
	SOUTH = QUARTILE_DIRECTION::SOUTH,
	WEST = QUARTILE_DIRECTION::WEST,
	NORTH_EAST = 'A',
	NORTH_WEST = 'B',
	SOUTH_EAST = 'C',
	SOUTH_WEST = 'D',
	NONE = QUARTILE_DIRECTION::NONE
} OCTILE_DIRECTION;


dir_t VALID_QUARTILE_DIRECTIONS[4] = { 
	QUARTILE_DIRECTION::NORTH, 
	QUARTILE_DIRECTION::EAST, 
	QUARTILE_DIRECTION::SOUTH, 
	QUARTILE_DIRECTION::WEST 
};

int NUM_VALID_QUARTILE_DIRECTIONS = sizeof(VALID_QUARTILE_DIRECTIONS) / sizeof(QUARTILE_DIRECTION);

dir_t VALID_OCTILE_DIRECTIONS[8] = { 
	OCTILE_DIRECTION::NORTH, 
	OCTILE_DIRECTION::NORTH_EAST, 
	OCTILE_DIRECTION::EAST, 
	OCTILE_DIRECTION::SOUTH_EAST, 
	OCTILE_DIRECTION::SOUTH, 
	OCTILE_DIRECTION::SOUTH_WEST, 
	OCTILE_DIRECTION::WEST, 
	OCTILE_DIRECTION::NORTH_WEST 
};

int NUM_VALID_OCTILE_DIRECTIONS = sizeof(VALID_OCTILE_DIRECTIONS) / sizeof(OCTILE_DIRECTION);

dir_t getOppositeDir(dir_t dir) {
	switch (dir) {
	case NORTH: return SOUTH;
	case SOUTH: return NORTH;
	case EAST: return WEST;
	case WEST: return EAST;
	case NORTH_EAST: return SOUTH_WEST;
	case NORTH_WEST: return SOUTH_EAST;
	case SOUTH_EAST: return NORTH_WEST;
	case SOUTH_WEST: return NORTH_EAST;
	default: return UNKNOWN;
	}
}

#endif